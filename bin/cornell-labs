#!/usr/bin/env node
'use strict';

const rp = require('request-promise');
const program = require('commander');
const opener = require('opener');
const inquirer = require('inquirer');
const {
  get_map_url,
  log,
  filter_on,
  underline_on,
  merge_with_id,
} = require('../lib/common')
const { labs } = require('../src/labs')
const chalk = require('chalk')
const stripAnsi = require('strip-ansi');

inquirer.registerPrompt('autocomplete', require('inquirer-autocomplete-prompt'));

program
  .option('-r, --resource [term]', 'Search for a specific resource')
  .on('--help', _ => {
    console.log('');
    console.log('  Examples:');
    console.log('');
    console.log('    cornell labs -r mac      # Find labs with macs');
    console.log('    cornell labs             # Browse labs');
    console.log('');
  })
  .parse(process.argv);

// TODO: Find labs with a specific resource
// TODO: Find labs nearby another lab

const filter_lab = (query, labs) => {
  // Labs that have "query" in their name
  const in_name = labs.filter(({ name }) => filter_on(query)(name))
  // Labs that have "query" in their resource list
  const in_resources = labs.filter(({ resources }) => {
    const queried_resources = resources.filter(filter_on(query))
    return !!queried_resources.length
  })

  // merges both of them
  const merged = merge_with_id(in_name, in_resources, ({ id }) => id)

  // get labels
  const labels = merged.map(({ name, resources }) => {
    // if lab has a resource that matches the query, show it in the label
    const queried_resources = resources.filter(filter_on(query))
    const show_has = query && query.length && queried_resources.length
    const sorted_resources = // so that "R" shows up first
      queried_resources.sort((a, b) => a.length - b.length)
    const print_resources =
      queried_resources.slice(0, 1).join(', ') +
      (queried_resources.slice(1).length ? ', ...' : '')
    return `${name}${show_has ? ` (has: ${print_resources})` : ''}`
  })
  .map(underline_on(query))

  return labels
}

/** Asks user to select a lab */
const prompt_lab = labs =>
  inquirer.prompt([{
    type: 'autocomplete',
    name: 'lab',
    message: 'Search:',
    source: (answersSoFar, input) =>
      Promise.resolve(filter_lab(input, labs))

  }]).then(ans => {
    const name = stripAnsi(ans.lab.replace(/ \(has: .*\)/i, ''))
    return labs.filter(s => s.name === name)[0];
  })

/** Asks user to select an action on a lab */
const prompt_action = lab =>
  inquirer.prompt([{
    type: 'list',
    name: 'action',
    message: `${lab.name} (${lab.location}):`,
    choices: [
      'Map',
      'Resources',
    ]
  }])
    .then(({action}) => ({ action, lab }))

const print_resources = ({ resources }) =>
  resources.map(r => ` - ${r}`).forEach(x => console.log(x))

const execute_action = ({ lab, action }) =>
    action === 'Map' ? opener(get_map_url(lab.coordinates)) :
    action === 'Resources' ? print_resources(lab) :
    console.log(action)

labs()
  .then(prompt_lab)
  .then(prompt_action)
  .then(execute_action)
