#!/usr/bin/env node
var rp       = require('request-promise');
var inquirer = require('inquirer');
var program  = require('commander').parse(process.argv);
var chalk    = require('chalk');
               require('sugar');

var hall = program.args.join(' ');

var hall_id = {
  '104' : '104west',
  'libe' : 'amit_bhatia_libe_cafe',
  'atrium' : 'atrium_cafe',
  'nasties' : 'bear_necessities',
  'bears den' : 'bears_den',
  'becker' : 'becker_house_dining_room',
  'big red barn' : 'big_red_barn',
  'jennie' : 'cafe_jennie',
  'carols' : 'carols_cafe',
  'cascadeli' : 'cascadeli',
  'cook' : 'cook_house_dining_room',
  'dairy bar' : 'cornell_dairy_bar',
  'goldies' : 'goldies',
  'green dragon' : 'green_dragon',
  'ivy room' : 'ivy_room',
  'bethe' : 'jansens_dining_room_bethe_house',
  'jansens market' : 'jansens_market',
  'keeton' : 'keeton_house_dining_room',
  'marthas' : 'marthas_cafe',
  'mattins' : 'mattins_cafe',
  'appel' : 'north_star',
  'okies' : 'okenshields',
  'okenshields' : 'okenshields',
  'risley' : 'risley_dining',
  'rpcc' : 'robert_purcell_marketplace_eatery',
  'rose' : 'rose_house_dining_room',
  'rustys' : 'rustys',
  'synapsis' : 'synapsis_cafe',
  'trillium' : 'trillium'
};

var halls = [
  '104',
  'nasties',
  'becker',
  'cook',
  'bethe',
  'keeton',
  'appel',
  'okies',
  'risley',
  'rpcc',
  'rose'
];

// By default, commander splits the arguments. Let's join them.
if (hall) {
  if(!hall_id[hall]) return;
  show_menu(hall);
  return;
}

inquirer.prompt([
  { type: "list",
    message: "What hall?",
    paginated : true,
    name: "hall",
    choices: halls
  }
], function( answers ) {
  show_menu(answers.hall);
});


function show_menu (hall) {
  var today    = (new Date()).toDateString().replace(/ /g, '%20');
  var tomorrow =  new Date(); 
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow = tomorrow.toDateString().replace(/ /g, '%20');

  var menu_req = 'http://redapi-tious.rhcloud.com/dining/menu/' +
                  hall_id[hall] + '/ALL/LOCATIONS';
  var time_req = 'http://redapi-tious.rhcloud.com/dining/event/' +
                  hall_id[hall] + '/' + today + '-' + tomorrow;
  
  rp(menu_req)
  .then(function (body) {
    var data = JSON.parse(body)[hall_id[hall]];
    console.log();
    Object.keys(data).forEach(function (meal) {
      if (data[meal] === null) return;

      console.log(chalk.green.underline(meal) + ':');
      data[meal].forEach(function (menu_item) {
        var extra = menu_item.healthy ? " üçé" : ""; 
        console.log(" " + menu_item.name + extra);
      });
      console.log();
    });
  })
  .then(function () {
    return rp(time_req);
  })
  .then(function (body) {
    var data = JSON.parse(body)[hall_id[hall]];

    var atm = data.filter(function (event) {
      start = (new Date(event.start)).getTime();
      end   = (new Date(event.end)).getTime();
      now   = (new Date()).getTime();
      return (start < now) && (now < end);
    });

    var nxt = data.filter(function (event) {
      start = (new Date(event.start)).getTime();
      end   = (new Date(event.end)).getTime();
      now   = (new Date()).getTime();
      return (now < start) && (now < end);
    })
    .sort(function (a, b) {
      a = (new Date(a.start)).getTime();
      b = (new Date(b.start)).getTime();
      return (a < b) ? -1 : 1;
    });

    if (atm.length  >  1) console.log('what now');
    if (atm.length === 1) console.log(atm[0].summary);
    if (atm.length  <  1) {
      console.log('‚õîÔ∏è  ' + chalk.red.underline('Closed! Somewhere else maybe?') + ' üíÉ üíÉ üíÉ ');

      var next = (new Date(nxt[0].start));
      var next_open = next.format('{weekday} {Month} {dd} ');
      if ((new Date(nxt[0].start)).isTomorrow()) next_open = 'tomorrow ';
      if ((new Date(nxt[0].start)).isToday()) next_open = '';
      if (nxt.length > 0) console.log('   Opens:', next_open + next.format('{12hr}:{mm}{tt}'));
    }

    
    return console.log();
  });

}




