#!/usr/bin/env node
'use strict';
/* global console, require, process */
var rp       = require('request-promise');
var inquirer = require('inquirer');
var program  = require('commander').parse(process.argv);
var chalk    = require('chalk');
var hdate    = require('human-date')
               require('sugar');

var hall = program.args.join(' ');

var hall_id = {
  '104' : '104west',
  'libe' : 'amit_bhatia_libe_cafe',
  'atrium' : 'atrium_cafe',
  // 'nasties' : 'bear_necessities',
  'bears den' : 'bears_den',
  'becker' : 'becker_house_dining_room',
  'big red barn' : 'big_red_barn',
  'jennie' : 'cafe_jennie',
  'carols' : 'carols_cafe',
  'cascadeli' : 'cascadeli',
  'cook' : 'cook_house_dining_room',
  'dairy bar' : 'cornell_dairy_bar',
  'goldies' : 'goldies',
  'green dragon' : 'green_dragon',
  'ivy room' : 'ivy_room',
  'bethe' : 'jansens_dining_room_bethe_house',
  'jansens market' : 'jansens_market',
  'keeton' : 'keeton_house_dining_room',
  'marthas' : 'marthas_cafe',
  'mattins' : 'mattins_cafe',
  'appel' : 'north_star',
  'okies' : 'okenshields',
  'okenshields' : 'okenshields',
  'risley' : 'risley_dining',
  'rpcc' : 'robert_purcell_marketplace_eatery',
  'rose' : 'rose_house_dining_room',
  'rustys' : 'rustys',
  'synapsis' : 'synapsis_cafe',
  'trillium' : 'trillium'
};

var shortname = {
   '104west' : '104',
   'amit_bhatia_libe_cafe' : 'libe',
   'atrium_cafe' : 'atrium',
   'bear_necessities' : 'nasties',
   'bears_den' : 'bears den',
   'becker_house_dining_room' : 'becker',
   'big_red_barn' : 'big red barn',
   'cafe_jennie' : 'jennie',
   'carols_cafe' : 'carols',
   'cascadeli' : 'cascadeli',
   'cook_house_dining_room' : 'cook',
   'cornell_dairy_bar' : 'dairy bar',
   'goldies' : 'goldies',
   'green_dragon' : 'green dragon',
   'ivy_room' : 'ivy room',
   'jansens_dining_room_bethe_house' : 'bethe',
   'jansens_market' : 'jansens market',
   'keeton_house_dining_room' : 'keeton',
   'marthas_cafe' : 'marthas',
   'mattins_cafe' : 'mattins',
   'north_star' : 'appel',
   'okenshields' : 'okies',
   'risley_dining' : 'risley',
   'robert_purcell_marketplace_eatery' : 'rpcc',
   'rose_house_dining_room' : 'rose',
   'rustys' : 'rustys',
   'synapsis_cafe' : 'synapsis',
   'trillium' : 'trillium'
}

var halls = [
  '104',
  // 'nasties',
  'becker',
  'cook',
  'bethe',
  'keeton',
  'appel',
  'okies',
  'risley',
  'rpcc',
  'rose'
];

var supported = {
  '104west' : true,
  'becker_house_dining_room' : true,
  'cook_house_dining_room' : true,
  'jansens_dining_room_bethe_house' : true,
  'keeton_house_dining_room' : true,
  'north_star' : true,
  'okenshields' : true,
  'risley_dining' : true,
  'robert_purcell_marketplace_eatery' : true,
  'rose_house_dining_room' : true
}

// By default, commander splits the arguments. Let's join them.
if (hall) {
  if(!hall_id[hall]) return;
  show_menu(hall);
  return;
}


// Get the open status of all at once.
rp('http://tangerine-tious.rhcloud.com/dining/location_status/')
.then(function (body) {
  var data = JSON.parse(body);
  return data.locations
  .map(function (x) {
    if (!supported[x.id]) return null;
    var change = new Date(x.event_changes[0].time);
    console.log(change)
    var message = x.status === 'open' ? 'open'
      : "open in " + hdate.relativeTime(change).replace(" from now", '');
    
    // console.log(x.id)
    var space = new Array(7 - shortname[x.id].length).join(' ');

    return {
      message: shortname[x.id] + space + " - " +  message + "",
      id: x.id
    }
  })
  .filter(function(x) { 
    return !!x;
  });
})

.then(function (queries) {
  // Ask which hall with a nice menu.
  inquirer.prompt([
    { type: 'list',
      message: 'What hall?',
      paginated : true,
      name: 'hall',
      choices: queries.map(function (x) { return x.message; })
    }
  ], function (answers) {
    show_menu(answers.hall.split('-')[0].trim());
  });

})

.catch(function (err) {
  console.log('Ah! An error fetching the status of locations üòû');
  console.log("Try running npm update -g cornell.");
  console.log("If that doesn't fix it, https://github.com/mrkev/cornell/issues")
  console.log(err.message);
  process.exit();
})




/**
 * Fetches and displays manu information.
 * @param  {String} hall Hall to display the menu for. Must be a key 
 *                       for hall_id.
 */
function show_menu (hall) {
  var today    = (new Date()).toDateString().replace(/ /g, '%20');
  var tomorrow =  new Date(); 
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow = tomorrow.toDateString().replace(/ /g, '%20');

  var menu_req = 'http://redapi-tious.rhcloud.com/dining/menu/' +
                  hall_id[hall] + '/ALL/LOCATIONS';
  var time_req = 'http://redapi-tious.rhcloud.com/dining/event/' +
                  hall_id[hall] + '/' + today + '-' + tomorrow;
  
  // Request the menu
  rp(menu_req)

  .catch(function (err) {
    console.log('Couldn\'t reach RedAPI. üòû');
    console.log("Try running npm update -g cornell.");
    console.log("If that doesn't fix it, https://github.com/mrkev/cornell/issues")
    console.log(err.message);
    process.exit();
  })
  
  // Print the menu
  .then(function (body) {
    var data = JSON.parse(body)[hall_id[hall]];
    console.log();
    Object.keys(data).forEach(function (meal) {
      if (data[meal] === null) return;

      console.log(chalk.green.underline(meal) + ':');
      data[meal].forEach(function (menu_item) {
        var extra = menu_item.healthy ? ' üçé' : ''; 
        console.log(' ' + menu_item.name + extra);
      });
      console.log();
    });
  })

  .catch(function (err) {
    console.log('Couldn\'t the menus and stuff, srry. üòû');
    console.log(err.message);
    process.exit();
  })

  // Request the time open
  .then(function () {
    return rp(time_req);
  })

  .catch(function (err) {
    console.log('Couldn\'t reach RedAPI. üòû');
    console.log("Try running npm update -g cornell.");
    console.log("If that doesn't fix it, https://github.com/mrkev/cornell/issues")
    console.log(err.message);
    process.exit();
  })

  // Print the time open
  .then(function (body) {
    var data = JSON.parse(body)[hall_id[hall]];

    var atm = data.filter(function (event) {
      var start = (new Date(event.start)).getTime();
      var end   = (new Date(event.end)).getTime();
      var now   = (new Date()).getTime();
      return (start < now) && (now < end);
    });

    var nxt = data.filter(function (event) {
      var start = (new Date(event.start)).getTime();
      var end   = (new Date(event.end)).getTime();
      var now   = (new Date()).getTime();
      return (now < start) && (now < end);
    })
    .sort(function (a, b) {
      a = (new Date(a.start)).getTime();
      b = (new Date(b.start)).getTime();
      return (a < b) ? -1 : 1;
    });

    if (atm.length  >  1) console.log('what now');
    if (atm.length === 1) console.log(atm[0].summary);
    if (atm.length  <  1) {
      console.log('‚õîÔ∏è  ' + chalk.red.underline('Closed! Somewhere else maybe?') + ' üíÉ üíÉ üíÉ ');

      if (!nxt[0]) return console.log();
      var next = (new Date(nxt[0].start));
      var next_open = next.format('{weekday} {Month} {dd} ');
      if ((new Date(nxt[0].start)).isTomorrow()) next_open = 'tomorrow ';
      if ((new Date(nxt[0].start)).isToday()) next_open = '';
      if (nxt.length > 0) console.log('   Opens:', next_open + next.format('{12hr}:{mm}{tt}'));
    }
    
    return console.log();
  })

  .catch(function (err) {
    console.log('Couldn\'t figure out the times, srry. üòû');
    console.log("Try running npm update -g cornell.");
    console.log("If that doesn't fix it, https://github.com/mrkev/cornell/issues")
    console.log(err.message);
    process.exit();
  });
}




